/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Entities.*;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Steven Sameh
 */
public class AddNewInstructor extends javax.swing.JFrame {

    Admin admin;
    final static private int deltaXLabelCombo = 15, deltaYLabelCombo = 3;
    private JComboBox<Integer> yearComboBox, monthComboBox, dayComboBox;
    private DefaultListCellRenderer listRenderer;
    private Vector<Integer> months, days;
    private Pattern pattern;
    private Matcher matcher;
    /**
     * Creates new form AddNewInstructor
     */
    public AddNewInstructor(Admin admin) {
        this.admin = admin;
        initComponents();
        // Setting the Alignment of the items in the list
        listRenderer = new DefaultListCellRenderer();
        listRenderer.setHorizontalAlignment(DefaultListCellRenderer.CENTER);
        showDatePortion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        LogoutButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        username = new javax.swing.JLabel();
        firstName = new javax.swing.JLabel();
        middleName = new javax.swing.JLabel();
        lastName = new javax.swing.JLabel();
        birthDate = new javax.swing.JLabel();
        mobileNumber = new javax.swing.JLabel();
        email = new javax.swing.JLabel();
        password = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        UsernameTextfield = new javax.swing.JTextField();
        middleNameTextfield = new javax.swing.JTextField();
        emailTextfield = new javax.swing.JTextField();
        lastNameTextfield = new javax.swing.JTextField();
        firstNameTextfield = new javax.swing.JTextField();
        passwordTextfield = new javax.swing.JPasswordField();
        mobileNumberTextfield = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(134, 171, 161));

        title.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        title.setText("Add New Instuctor");

        LogoutButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        LogoutButton.setText("Logout");
        LogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutButtonActionPerformed(evt);
            }
        });

        BackButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        username.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        username.setText("Username");

        firstName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        firstName.setText("First Name");

        middleName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        middleName.setText("Middle Name");

        lastName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lastName.setText("Last Name");

        birthDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        birthDate.setText("Birth Date");

        mobileNumber.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        mobileNumber.setText("Mobile Number");

        email.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        email.setText("Email");

        password.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        password.setText("Password");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }

        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(BackButton)
                .addGap(195, 195, 195)
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LogoutButton)
                .addGap(24, 24, 24))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(346, 346, 346)
                .addComponent(addButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(username)
                            .addComponent(middleName)
                            .addComponent(birthDate)
                            .addComponent(email))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstName)
                            .addComponent(lastName)
                            .addComponent(mobileNumber)
                            .addComponent(password))
                        .addGap(195, 195, 195))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(UsernameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(firstNameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(middleNameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lastNameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(109, 109, 109))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(247, 247, 247)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passwordTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mobileNumberTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(109, Short.MAX_VALUE))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(firstName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(firstNameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(BackButton)
                            .addComponent(LogoutButton)
                            .addComponent(title))
                        .addGap(84, 84, 84)
                        .addComponent(username)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UsernameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(middleName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(middleNameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lastName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lastNameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(birthDate)
                        .addGap(36, 36, 36))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(mobileNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mobileNumberTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(email)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(emailTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(password)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(passwordTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(addButton)
                .addGap(97, 97, 97))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutButtonActionPerformed
        new Login().setVisible(true);
        dispose();
    }//GEN-LAST:event_LogoutButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        new AdminDashboard(admin.getUsername()).setVisible(true);
        dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if(isAllWhiteSpaces(UsernameTextfield.getText()) || isAllWhiteSpaces(firstNameTextfield.getText())
                || isAllWhiteSpaces(middleNameTextfield.getText()) || isAllWhiteSpaces(lastNameTextfield.getText())
                || isAllWhiteSpaces(emailTextfield.getText())
                || isAllWhiteSpaces(mobileNumberTextfield.getText()) || isAllWhiteSpaces(passwordTextfield.getText())){
            JOptionPane.showMessageDialog(null, "You should fill out all text fields", "Error", JOptionPane.ERROR_MESSAGE);
            return ;
        }else if(User.isUsernameExisted(UsernameTextfield.getText())){
            JOptionPane.showMessageDialog(null, "This username is already in use", "Error", JOptionPane.ERROR_MESSAGE);
            return ;
        }else if(!mobileNumberValidation()){
            JOptionPane.showMessageDialog(null, "This mobile number is invlaid.", "Error", JOptionPane.ERROR_MESSAGE);
            return ;
        }else if(!passwordValidation()){
            JOptionPane.showMessageDialog(null, "The Password should contain: at least 8 characters and numbers, one special character, one Uppercase Letter and one Lowercase Letter.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }else if(!emailValidation()){
            JOptionPane.showMessageDialog(null, "This Email is invalid.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }else if(!nameValidation()){
            JOptionPane.showMessageDialog(null, "Numbers and special character are not allowed in name fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int year = (int) yearComboBox.getSelectedItem();
        int month = (int) monthComboBox.getSelectedItem();
        int day = (int) dayComboBox.getSelectedItem();
        LocalDate instructorBirthDate = LocalDate.of(year, month, day);

        Instructor newInstructor = new Instructor(UsernameTextfield.getText(), mobileNumberTextfield.getText(), emailTextfield.getText(),
                firstNameTextfield.getText(), middleNameTextfield.getText(), lastNameTextfield.getText(), instructorBirthDate, passwordTextfield.getText());
        newInstructor.add();
        JOptionPane.showMessageDialog(null, "Add Instructor successfully", "", JOptionPane.INFORMATION_MESSAGE);
        new AdminDashboard(admin.getUsername()).setVisible(true); ;
        dispose();
    }//GEN-LAST:event_addButtonActionPerformed

    private boolean nameValidation() {
        pattern = Pattern.compile("^[a-zA-Z]{3,99}$");
        matcher = pattern.matcher(firstNameTextfield.getText()+middleNameTextfield.getText()+lastNameTextfield.getText());
        return matcher.find();
    }

    private boolean passwordValidation() {
        pattern = Pattern.compile("^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\\w\\d\\s:])([^\\s]){8,123}$");
        matcher = pattern.matcher(passwordTextfield.getText());
        return matcher.find();
    }
    private boolean emailValidation(){
        pattern = Pattern.compile("^((?!\\.)[\\w_.]*[^.])(@\\w+)(\\.\\w+(\\.\\w+)?[^.\\W])$");
        matcher = pattern.matcher(emailTextfield.getText());
        return matcher.find();
    }

    private boolean mobileNumberValidation() {
        try {
            Long.parseLong(mobileNumberTextfield.getText());
            return true;
        }catch(Exception e){
            return false;
        }
    }

    private boolean isAllWhiteSpaces(String data){
        int whiteSpaceFreq = 0;
        for(char c : data.toCharArray())
        {
            if (c == ' ')
                whiteSpaceFreq++;
        }
        return whiteSpaceFreq == data.length();
    }


    private void showDatePortion() {
        // A base X and Y positions so that changing multiple component at once would be easily done.
        int baseXPosition = -3;
        int baseYPosition = 360;

        // Creating a Label for the date portion and setting its properties
        // Initializing a ComboBox to hold years in range CURRENT_YEAR : Exam.getYearLimit() and setting its properties
        yearComboBox = new JComboBox<>();
        yearComboBox.setBounds(baseXPosition + 210 + deltaXLabelCombo, baseYPosition, 70, 30);

        // Creating years vector to store the years in the valid range.
        Vector<Integer> years = new Vector<>();
        for (int yearIterator = 1900; yearIterator <= 2020; ) {
            years.add(yearIterator++);
        }

        // Adding years vector to the combobox list of items.
        yearComboBox.setModel(new DefaultComboBoxModel<>(years));

        // Centering the items in the combobox
        yearComboBox.setRenderer(listRenderer);

        // Setting the font to the combobox
        yearComboBox.setFont(new java.awt.Font("Tahoma", Font.BOLD, 13));

        // Setting the selected Item to the current Year
        yearComboBox.setSelectedItem(1900);

        // Adding the yearComboBox to the panel
        jPanel1.add(yearComboBox);
        // Initializing months vector to store the months in the valid range.
        monthComboBox = new JComboBox<>();
        monthComboBox.setBounds(baseXPosition + 130 + deltaXLabelCombo, baseYPosition, 70, 30);

        // Initializing a vector to store the months in the combobox.
        months = new Vector<>();
        for (int monthIterator = 1; monthIterator <= 12; ) {
            months.add(monthIterator++);
        }

        // Adding months vector to the combobox list of items.
        monthComboBox.setModel(new DefaultComboBoxModel<>(months));

        // Centering the items in the combobox
        monthComboBox.setRenderer(listRenderer);

        // Setting the font to the combobox
        monthComboBox.setFont(new java.awt.Font("Tahoma", Font.BOLD, 13));

        // Setting the selected item to the current month
        monthComboBox.setSelectedItem(1);

        // Adding the monthComboBox to the panel
        jPanel1.add(monthComboBox);

        // Creating ComboBox to hold month in range 1 : 12 and setting its properties
        dayComboBox = new JComboBox<>();
        dayComboBox.setBounds(baseXPosition + 50 + deltaXLabelCombo, baseYPosition, 70, 30);

        // Initializing days vector to store the days in the valid range
        days = new Vector<>();
        //setting the dayLimit
        int dayLimit = getDayLimit((int) monthComboBox.getSelectedItem(), (int) yearComboBox.getSelectedItem());
        for (int dayIterator = 1; dayIterator <= dayLimit; ) {
            days.add(dayIterator++);
        }

        // Adding days vector to the combobox list of items.
        dayComboBox.setModel(new DefaultComboBoxModel<>(days));

        // Centering the items in the combobox
        dayComboBox.setRenderer(listRenderer);

        // Setting the font to the combobox
        dayComboBox.setFont(new java.awt.Font("Tahoma", Font.BOLD, 13));

        // Setting the selected item to the current day
        dayComboBox.setSelectedItem(1);

        // adding the dayComboBox to the panel
        jPanel1.add(dayComboBox);

        // Creating an action listener instance to track whatever changes might occur while running
        PageActionListener listener = new PageActionListener();

        // Adding the Action Listener to the combobox-es
        yearComboBox.addActionListener(listener);
        monthComboBox.addActionListener(listener);

    }


    boolean leapYear(int year) {
        if (year % 4 == 0) {
            if (year % 100 == 0) {
                return year % 400 == 0;
            } else {
                return true;
            }
        } else {
            return false;
        }
    }

    /**
     * It checks which month and returns its fixed limit and if it's February,
     * checks for leap year as well.
     *
     * @param month the month in question
     * @param year  the year in question
     * @return how many days in the month and the year in question
     */

    private int getDayLimit(int month, int year) {
        switch (month) {
            case 2:
                if (leapYear(year)) {
                    return 29;
                } else {
                    return 28;
                }
            case 4:
            case 6:
            case 9:
            case 11:
                return 30;
            default:
                break;
        }
        return 31;
    }


    @Override
    public void setResizable(boolean resizable) {
        super.setResizable(resizable);
    }

    /**
     * This method refreshes the day list so that every day available
     * to the instructor to choose is a valid day.
     * It does that by clearing the day vector, checks the lower limit
     * for the month list and adds all the month from the lower limit up
     * to the upper limit returned from getDayLimit(selectedMonth, selectedYear).
     */

    void refreshDayList() {
        // Declaring the day iterator variable
        int dayIterator = 1, selectedDay = (int) dayComboBox.getSelectedItem(),
                dayLimit = getDayLimit((int) monthComboBox.getSelectedItem(), (int) yearComboBox.getSelectedItem()); //setting the dayLimit

        // clearing days vector
        days.clear();

        // filling the vector with the newly chosen month days range
        while (dayIterator <= dayLimit) {
            days.add(dayIterator++);
        }

        // Adding days vector to the combobox list of items.
        dayComboBox.setModel(new DefaultComboBoxModel<>(days));

        // Getting the current month to avoid erasing the user's selection if not necessary
        if (selectedDay > dayLimit) selectedDay = dayLimit;
            dayComboBox.setSelectedItem(selectedDay);

    }
    private class PageActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent event) {
            if (event.getSource() == yearComboBox || event.getSource() == monthComboBox) {
                refreshDayList();
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddNewClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddNewClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddNewClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddNewClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddNewInstructor(new Admin("admin")).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JButton LogoutButton;
    private javax.swing.JTextField UsernameTextfield;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel birthDate;
    private javax.swing.JLabel email;
    private javax.swing.JTextField emailTextfield;
    private javax.swing.JLabel firstName;
    private javax.swing.JTextField firstNameTextfield;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lastName;
    private javax.swing.JTextField lastNameTextfield;
    private javax.swing.JLabel middleName;
    private javax.swing.JTextField middleNameTextfield;
    private javax.swing.JLabel mobileNumber;
    private javax.swing.JTextField mobileNumberTextfield;
    private javax.swing.JLabel password;
    private javax.swing.JPasswordField passwordTextfield;
    private javax.swing.JLabel title;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables
}
